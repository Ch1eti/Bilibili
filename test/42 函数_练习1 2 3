//函数_练习

//1.写一个函数打印1000~2000年之间的闰年
//2.写一个函数，实现一个整形有序数组的二分查找
//3.写一个函数，每调用一次合格函数，就会将num的值加1
//4.


//数组传参实际上是传递数组首元素的地址，而不是整个数组
//所以在函数内部计算一个函数参数部分的数组的元素个数是不靠谱的


////1.写一个函数打印1000~2000年之间的闰年
//闰年判断规则：1.能被4整除，并且不能被100整除  2.能被400整除
#include <stdio.h>

//int main()
//{
//    int year = 0;
//    for (year = 1000; year <= 2000; year++)
//    {
//        //判断year是不是闰年
//        if (((year % 4 ==0) && (year % 100 != 0)) || (year % 400 == 0))
//        {
//            printf("%d ", year);
//        }
//    }
//    return 0;
//}

//是闰年返回1，不是闰年返回0
//int is_leap_year(int y)
//{
//    if (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0))
//        return 1;
//    else
//        return 0;
//}
//
//int main()
//{
//    int year = 0;
//    for (year = 1000; year <= 2000; year++)
//    {
//        //判断year是不是闰年
//        if (is_leap_year(year))
//        {
//            printf("%d ", year);
//        }
//    }
//    return 0;
//}


////2.写一个函数，实现一个整形有序数组的二分查找

//int binary_search(int arr[], int k, int sz) //形参arr看上去是数组，本质是指针变量
//{
//    int left = 0;
//    int right = sz - 1;
//
//    while (left <= right)
//    {
//        int mid = left + (right - left) / 2;
//        if (arr[mid] < k)
//        {
//            left = mid + 1;
//        }
//        else if (arr[mid] > k)
//        {
//            right = mid - 1;
//        }
//        else
//        {
//            return mid;//找到了返回下标
//        }
//    }
//    return -1;//找不到
//}
//
//int main()
//{
//    int arr[] = {1,2,3,4,5,6,7,8,9,10};
//    int k = 7;
//    int sz = sizeof(arr) / sizeof(arr[0]);
//    //找到了返回下标，找不到返回-1
//    int ret = binary_search(arr, k, sz);
//    if (ret == -1)
//    {
//        printf("Not found.\n");
//    }
//    else
//    {
//        printf("Find it.The index of it is %d.\n", ret);
//    }
//    return 0;
//}

////布尔类型 bool

#include <math.h>
//
//bool is_prime(int n) //bool返回时候只能是false和true，false就是0，true就是1
//{
//    int j = 0;
//    for (j = 2; j <= sqrt(n); j++)
//    {
//        if (n % j == 0)
//        {
//            return false;//false也可以是0
//        }
//    }
//    return true;//true也可以是1
//}
//
//int main()
//{
//    int i = 0;
//    for ( i = 101; i <= 200; i+=2)
//    {
//        if (is_prime(i))
//        {
//            printf("%d ", i);
//        }
//    }
//    return 0;
//}


////3.写一个函数，每调用一次合格函数，就会将num的值加1

// //方法一
//void Add(int* p)
//{
//    (*p)++;
//}
//
//int main()
//{
//    int num = 0;
//    Add(&num);
//    printf("%d\n", num);//1
//    Add(&num);
//    printf("%d\n", num);//2
//    Add(&num);
//    printf("%d\n", num);//3
//
//    return 0;
//}


// //方法二
int Add(int n)
{
    return n + 1;
}

int main()
{
    int num = 0;
    num = Add(num);
    printf("%d\n", num);//1
    num = Add(num);
    printf("%d\n", num);//2
    num = Add(num);
    printf("%d\n", num);//3

    return 0;
}
