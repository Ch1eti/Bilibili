//函数_递归与迭代

//练习3：求n的阶乘（不考虑溢出）

#include <stdio.h>

//递归实现
//int fac(int n)
//{
//    if (n <= 1)
//        return 1;
//    else
//        return n*fac(n - 1);
//}
//
//迭代实现--非递归
/*int fac(int n)
{
    int i = 0;
    int ret = 1;
    for (i = 1; i < = n; i++)
    {
        ret *= i;
    }
    return ret;
}*/
//
//int main()
//{
//    int i = 1;
//    int n = 0;
//    scanf("%d", &n);
//    int ret = fac(n);
//    printf("%d\n", ret);
//
//    return 0;
//}


//练习4：求第n个斐波那契数(不考虑溢出)
//1 1 2 3 5 8 13 21 34 55 ...

//递归实现  过多的重复计算，有严重的溢出
/*int Fib(int n)
{
    if (n <= 2)
        return 1;
    else
        return Fib(n - 1) + Fib(n - 2);
}*/

//迭代实现
int Fib(int n)
{
    int a = 1;
    int b = 1;
    int c = 0;
    if (n <= 2)
        return 1;
    while (n >= 3)
    {
        c = a + b;
        a = b;
        b = c;
        n--;
    }
    return c;
}

int main()
{
    int n = 0;
    scanf("%d", &n);
    int ret = Fib(n);
    printf("%d\n", ret);
    return 0;
}
