//数组_二维数组和和数组越界

//二维数组的创建
//二维数组的初始化
//二维数组的使用
//二维数组在内存中的的存储
//数组越界
//数组作为函数参数


#include <stdio.h>

///二维数组的创建
//int main()
//{
//    // 1 2 3 4
//    // 2 3 4 5
//    // 3 4 5 6
//    //int arr1[3][4] = {1,2,3,4,2,3,4,5,3,4,5,6}; // 3行4列数组
//    //int arr1[3][4] = {{1,2},{3,4},{5,6}};// 用{}进行分组
//    char arr2[5][10]; // 5行10列
//    double arr3[2][4]; // 2行4列
//
//    return 0;
//}

///二维数组的初始化
//int main()
//{
//    int arr[] = {1,2,3,4,5}; //5
//
//    int arr2[][4] = {{1,2,3,4},{2,3}}; //可以省略行，不能省略列
//    // 1,2,3,4
//    // 2,3,0,0
//
//    return 0;
//}

///二维数组的使用
// 可以把二维数组理解为：一维数组的数组
// 访问二维数组第0行 arr[0][j]
// 访问二维数组第1行 arr[1][j]
// 访问二维数组第1列 arr[i][1]
//int main()
//{
//    // 1 2 3 4
//    // 2 3 4 5
//    // 3 4 5 6
//    int arr[3][4] = {1,2,3,4,2,3,4,5,3,4,5,6};
//  // 打印二维数组
    /*
    int i = 0;
    for (i = 0; i < 3; i++)
    {
        int j = 0;
        for (j = 0; j < 4; j++)
        {
            printf("%d ", arr[i][j]);
        }
        printf("\n");
    }
    */
//    printf("%d ", arr[2][3]); // 6
//    return 0;
//}

///二维数组在内存中的的存储
//同一维数组

///数组越界
//数组的下标是有范围限制的。
//数组的下规定是从0开始的，如果数组有n个元素，最后一个元素的下标就是n-1。
//所以数组的下标如果小于0，或者大于n-1，就是数组越界访问了，超出了数组合法空间的访问。

///数组作为函数参数
//数组传参时候，形参有两种写法：
//1.数组  2.指针

//形参是数组形式
void bubble_sort(int arr[], int sz)
{

    int i = 0;
    for (i = 0; i < sz-1; i++)
    {
        int j = 0;
        for (j = 0; j < sz-1-i; j++)
        {
            if (arr[j] > arr[j + 1])
            {
                //交换
                int tmp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = tmp;
            }
        }
    }

}

int main()
{
    //把数组的数据排成升序
    int arr[] = {9,8,7,6,5,4,3,2,1,0};
    //0 1 2 3 4 5 6 7 8 9
    int sz = sizeof(arr) / sizeof(arr[0]);
    //冒泡排序算法: 两个相邻元素比较   一趟冒泡排序让一个数据来到它最终应该出现的位置上
    bubble_sort(arr, sz);
    int i = 0;
    for (i = 0; i < sz; i++)
    {
        printf("%d ", arr[i]);
    }

    return 0;
}
