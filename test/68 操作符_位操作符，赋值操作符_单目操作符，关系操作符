//操作符_位操作符，赋值操作符_单目操作符，关系操作符

//位操作符
//赋值操作符
//单目操作符
//关系操作符


//位操作符：
// & - 按(2进制)位与    *
// | - 按(2进制)位或    +
// ^ - 按(2进制)位异或  同则为0，异则为1
//    0 ^ a = a
//    a ^ a = a;
//    异或满足交换律


//sizeof是操作符，不是函数
//strlen是库函数，是用来求字符串长度


///位操作符
//#include <stdio.h>
//int main()
//{
//    int a = 3;     // 00000000000000000000000000000011   3的补码
//    int b = -5;    // 10000000000000000000000000000101  -5的原码
//                   // 11111111111111111111111111111011  -5的补码
//    int c = a & b; // 00000000000000000000000000000011   c的补码  = 3
//    int d = a | b; // 11111111111111111111111111111011   d的补码
//                   // 10000000000000000000000000000101   d的原码  = -5
//    int f = a ^ b; // 11111111111111111111111111111000   f的补码
//                   // 10000000000000000000000000001000   f的原码  = -8
//
//    printf("c=%d\n", c); //%d意味着打印一个有符号的整数
//    printf("d=%d\n", d);
//    printf("f=%d\n", f);
//
//    return 0;
//}


///1.不创建临时变量(第三个变量)，实现两个数的交换
/*
int main()
{
    int a = 3;
    int b = 5;

    printf("%d %d\n", a, b);
    方法一：
    //这种方法会有溢出
    a = a + b;
    b = a - b;
    a = a - b;

    //方法二：
    a = a ^ b;
    b = a ^ b;
    a = a ^ b;

    printf("%d %d\n", a, b);

    return 0;
}
*/

///2.编写代码实现，求一个整数储存在内存中的二进制中的1的个数
/*
#include <stdio.h>
int CountBits(int n)
{
    int count = 0;
    while (n)
    {
        count += n & 1;
        n >>= 1;
    }
    return count;
}

int main()
{
    int n = 0;
    printf("Please input a number:");
    scanf("%d", &n);
    int count = CountBits(n);

    printf("%d\n", count);

    return 0;
}
*/


///赋值操作符
//=  -=  *=  /=  %=  >>=  <<=  &=  |=  ^=


///单目操作符
// 只有一个操作数
// !      逻辑反操作
// &      取地址操作符
// sizeof 计算变量/类型所占内存的大小，单位是字节
// ~      对一个数的二进制按位取反
// *      间接访问操作符(解引用操作符)
// (类型)  强制类型转换
// -  +  &  -- ++
/*
#include <stdio.h>

//int main() {
//    int a = 3;
//    //00000000000000000000000000000011
//    //11111111111111111111111111111100 - 补码
//    //10000000000000000000000000000100
//    printf("%d\n", ~a); // a = -4

//    int b = 13;
//    b |= (1 << 1);
//    //00000000000000000000000000001101
//    //00000000000000000000000000000010  1 << 1
//    //00000000000000000000000000001111
//    printf("%d\n", b); // b = 15

//    int c = 29;
//    c &= (~(1 << 4));
//    //00000000000000000000000000011101
//    //11111111111111111111111111101111   b = 29
//    //00000000000000000000000000001101
//    printf("%d\n", c); // c = 13

//    int a = 10;
//    int* p = &a;
//    *p = 20; // a = 20     *p <=> a
//    printf("%d\n", a); // 20

//    int a = (int)3.14;
//    printf("%d\n", a);
//    return 0;
//}

void test1(int arr[])
{
    printf("%d\n", sizeof(arr));// 4或8 指针的大小是4或8个字节 32位4 64位8
}

void test2(char ch[])
{
    printf("%d\n", sizeof(ch)); // 4或8 指针
}

int main()
{
    int arr[10] = { 0 };
    char ch[10] = { 0 };
    printf("%d\n", sizeof(arr));// 40
    printf("%d\n", sizeof(ch)); // 10
    test1(arr);
    test2(arr);

    return 0;
}
*/

///关系操作符

#include <stdio.h>

int main()
{
    if ("abc" == "abcdef") //这样写是在比较两个字符串的首字符的地址
        printf("1");
    else
        printf("0");
    // 两个字符串比较相等应该用strcmp
    return 0;
}

