//结构体作业讲解
#include <stdio.h>

//牛客网 - 刷题，笔试
//leetcode

//1.统计二进制中1的个数(谷歌面试题)
//2.求两个数二进制中不同位的个数
//3.打印整数二进制的奇数位和偶数位
//4.BC68 X型图案
//5.BC54 获得月份天数


//全局变量，静态变量都是放在静态区
//全局变量，静态变量不初始化是，默认会被初始化为0
//局部变量，是放在栈区，不初始化，默认值是随机值
//sizeof这个操作符计算返回的结果是size_t类型的，是无符号整型的


///1.统计二进制中1的个数
//写出一个返回参数二进制中1的个数
/*
//1.方法一
//int count_num_of_1(unsigned int n) //unsigned保证负数也能计算二进制中1的个数
//{
//    int count = 0;
//
//    while(n)
//    {
//        if ((n % 2) == 1)
//            count++;
//        n /= 2;
//    }
//    return count;
//}

//2.方法二：二进制右移
//int count_num_of_1(int n)
//{
//    int count = 0;
//    int i = 0;
//    for (i = 0; i < 32; i++)
//    {
//        if (((n >> i) & 1) == 1) //n向右移动i位，判断是不是1
//            count++;
//    }
//    return count;
//}

//3.方法三：按位与&
//n = n&(n-1)
//1111 n
//1110 n-1
//1110 n = n&(n-1)
//1101 n-1
//1100 n = n&(n-1)
//1011 n-1
//1000 n = n&(n-1)
//0111 n-1
//0000 n = n&(n-1)
int count_num_of_1(int n)
{
    int count = 0;
    while(n)
    {
        n = n & (n - 1);
        count++;
    }
    return count;
}
//如果要判断一个数是不是2的n次方(二进制中只有一个1)
//if ((n & (n-1)) == 0)

int main()
{
    int num = 0;
    scanf("%d", &num);

    int n = count_num_of_1(num);
    printf("%d\n", n);

    return 0;
}*/

///2.求两个数二进制中不同位的个数
//编程实现：两个int(32位)整数m和n的二进制表达中，有多少个位(bit)不同
/*
//1.方法一：拿到每一位数字进行比较
//int count_diff_bit(int m, int n)
//{
//    int count = 0;
//    int i = 0;
//    for (i = 0; i < 32; i++)
//    {
//        if (((m >> i) & 1) != ((n >> i) & 1))
//            count++;
//    }
//    return count;
//}

//2.方法二：异或操作符
int count_diff_bit(int m, int n)
{
    int count = 0;
    //^ 异或操作符
    //相同为0，不同为1
    int ret = m ^ n;
    //统计ret二进制中1的个数
    while(ret)
    {
        ret = ret & (ret - 1);
        count++;
    }
    return count;
}

int main()
{
    int m = 0;
    int n = 0;
    scanf("%d %d", &m, &n);
    int ret = count_diff_bit(m, n);
    printf("%d\n", ret);

    return 0;
}*/

///3.打印整数二进制的奇数位和偶数位
//10
//00000000000000000000000000001010
/*
int main()
{
    int num = 0;
    scanf("%d", &num);

    //获取奇数位的数字
    int i = 0;
    for (i = 30; i >= 0; i -= 2)
    {
        printf("%d ", (num >> i) & 1);
    }
    printf("\n");

    //获取偶数位的数字
    int j = 0;
    for (j = 31; j >= 1; j -= 2)
    {
        printf("%d ", (num >> j) & 1);
    }

    return 0;
}*/

///4.BC68 X型图案
//多组输入，一个整数(2~20)，表示输出的行数，也表示组成"X"的反斜线和正斜线的长度
//针对每行输入，输出用"*"组成的X形图案
/*
int main()
{
    int n = 0;
    while (scanf("%d", &n) == 1)
    {
        int i = 0;
        int j = 0;
        for (i = 0; i < n; i++)
        {
            for (j = 0; j < n; j++)
            {
                if ((i == j) || ((i + j) == (n - 1)))
                    printf("*");
                else
                    printf(" ");
            }
            printf("\n");
        }
    }

    return 0;
}*/

///5.BC54 获得月份天数

int is_leap_year(int y)
{
    return (((y % 4 == 0) && (y % 100 != 0)) || (y % 400 == 0));
}

int main()
{
    int y = 0;
    int m = 0;
    int d = 0;
    int days[13] = {0,31,28,31,30,31,30,31,31,30,31,30,31};

    //0表示假，1表示真
    //逻辑操作符&& || !=的结果，如果是真就是1，如果是假就是0
    while (scanf("%d %d", &y, &m) == 2)
    {
        int d = days[m];
        if ((is_leap_year(y) == 1) && (m == 2))
            d++;
        printf("%d\n", d);
    }

    return 0;
}
