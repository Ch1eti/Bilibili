//指针_指针和指针类型
#include <stdio.h>

//1.指针
//2.指针和指针类型


///1.指针

//指针:
//1.指针是内存中一个最小单元的编号，也就是地址              (指针就是地址)
//2.口语中的指针，通常是指指针变量，是用来存放内存地址的变量 (在口语中，指针通常是指针变量)

//指针的大小在32位平台下是4个字节，在64位平台是8个字节

/*
int main()
{
    char b = 1;   //1byte 1个字节 1个地址
    int a = 10;   //a是整型变量，占用4个字节的内存空间
    int* pa = &a; //pa是是一个指针变量，用来存放地址

    char* pc = NULL;
    short* ps = NULL;
    int* pi = NULL;
    double* pd = NULL;

    //sizeof返回的值的类型是无符号类型 unsigned int
    printf("%zu\n", sizeof(pc)); // 64
    printf("%zu\n", sizeof(ps)); // 64
    printf("%zu\n", sizeof(pi)); // 64
    printf("%zu\n", sizeof(pd)); // 64

    return 0;
}
*/

///2.指针和指针类型

//指针类型的意义:
//1.
//指针类型决定了指针在被解引用的时候访问几个字节
//如果是int*的指针，解引用访问4个字节
//如果是char*的指针，解引用访问1个字节
/*
int main()
{
    int a = 0x11223344;
    //00010001 00100010 00110011 01000100
    int* pa = &a;
    *pa = 0; // 00 00 00 00

    char* pc = (char*)&a;//int*
    *pc = 0; // 00 33 22 11

    //指针类型决定了指针在被解引用的时候访问几个字节
    //如果是int*的指针，解引用访问4个字节
    //如果是char*的指针，解引用访问1个字节

    return 0;
}
*/

//2.
//指针类型决定了指针+-1操作的时候，跳过几个字节
//决定了指针的步长

int main()
{
    int a = 0x11223344;
    //00010001 00100010 00110011 01000100
    int* pa = &a;
    char* pc = (char*)&a;

    printf("pa = %p\n", pa);
    printf("pa + 1 = %p\n", pa + 1); // pa+1跳过4个字节  +2跳过2个int类型
    printf("pc = %p\n", pc);
    printf("pc + 1 = %p\n", pc + 1); // pc+1跳过1个字节  +2跳过2个char类型

    //指针类型决定了指针+-1操作的时候，跳过几个字节
    //决定了指针的步长(能操作几个字节)

    int b = 0;

    int* pi = &a;  //pi解引用访问4个字节，pi+1跳过4个字节
    float* pf = &a;//pf解引用访问4个字节，pi+1跳过4个字节
    //int* 和float* 不能通用
    //空间大小一样，但是对内存的解读方式(存储方式)不一样

    *pi = 100;   // 64 00 00 00
    *pf = 100.0; // 00 00 c8 42
    //结果不一样

    return 0;
}





