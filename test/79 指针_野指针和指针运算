//指针_野指针和指针运算
#include <stdio.h>

//1.野指针
//2.规避野指针
//3.指针运算


///1.野指针
//野指针: 指针指向的位置是不可知的(随机的、不正确的、没有明确限制的)
//1.指针未初始化
/*
int main()
{
    int* p;
    //p没有初始化，意味着没有明确的指向
    //局部变量不初始化的话，放的是随机值: 0xcccccccc
    *p = 10;//非法访问内存，这里的p就是野指针

    return 0;
}
*/

//2.指针越界访问
/*
int main()
{
    int arr[10] = { 0 };
    int* p = arr; //&arr[0]
    int i = 0;
    for (i = 0; i <= 10; i++)
    {
        *p = i;
        p++;
        //i = 10的时候，p++ = 11，指针指向的范围超出数组arr的范围
    }

    return 0;
}
*/

//3.指针指向的空间释放
/*
int* test()
{
    int a = 20;
    return &a;
}

int main()
{
    int* p = test();

    return 0;
}
*/

///2.规避野指针
/*
int main()
{
    int* p3 = NULL;
    if (p3 != NULL)
    {
        *p3 = 100;//ok
    }

    return 0;
}
*/

///3.指针运算
//1.指针+-整数
/*
int main()
{
    int arr[10] = { 0 };
    int i = 0;
    int sz = sizeof(arr) / sizeof(arr[0]);

    //数组下标的写法
//    for (i = 0; i < sz; i++)
//    {
//        arr[i] = 1;
//    printf("%d ", arr[i]);
//    }

    //指针加减的写法
    int* p = arr;
    for (i = 0; i < sz; i++)
    {
        *(p + i) = 1;
        //<=>
        //*p = 1;
        //p++;
        printf("%d ", arr[i]);
    }

    return 0;
}
*/

//2.指针-指针
//指针-指针 = 指针和指针之间元素的个数
//不是所有的指针都能相减
//指向同一块空间的指针才能相减
/*
int main()
{
    int arr[10] = { 0 };
    printf("%d\n", &arr[9] - &arr[0]); // 9
    printf("%d\n", &arr[0] - &arr[9]); // -9

    return 0;
}*/

//1
/*int my_strlen(char* str)
{
    int count = 0;
    while (*str != '\0')
    {
        count++;
        str++;
    }
    return count;
}*/
//2递归版本
//3指针-指针版本
/*int my_strlen(char* str)
{
    char* start = str;
    while (*str != '\0')
    {
        str++;
    }
    return (str - start);
}

int main()
{
    int len = my_strlen("abcdef");
    printf("%d\n", len);
    return 0;
}
*/

//3.指针的关系运算
//允许指向数组元素的指针与指向数组最后一个元素后面的那个内存位置的指针比较(允许向后越界)
//但是不允许与指向第一个元素之前的那个内存位置的指针进行比较             (不允许向前越界)
