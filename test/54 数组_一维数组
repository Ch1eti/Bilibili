//数组_一维数组

//数组的创建
//数组的初始化
//一维数组的使用
//一维数组在内存中的储存


#include <stdio.h>

///数组的创建：
// 数组：一组相同类型元素的集合
// type_t    arr_name    [const_n]
//          type_t 是指数组的元素类型
//          const_n 是一个常量表达式，用来指定数组的大小
//int arr[10];
//char ch[5];
//double data1[20];
//double data2[15+5];

//下面的代码只能在支持C99标准的编译器上编译
//int n = 10;
//int arr2[n]; // 这种数组不能初始化
//C99之前，数组大小必须是常量或者常量表达式
//C99之后，数组大小可以是变量，为了支持变长数组

///数组的初始化
//int main()
//{
//    //不完全初始化，剩余元素默认为0
//    int arr1[10] = {1,2,3};
//    char ch1[10] = {'a','b','c'};
//    // a b c 0 0 0 0 0 0 0  7个0
//    char ch2[10] = "abc";
//    // a b c \0 0 0 0 0 0 0  6个0
//    char ch3[] = {'a','b','c'};
//    // a b c
//    char ch4[] = "abc";
//    // a b c \0
//
//    return 0;
//}

///一维数组的使用
//int main()
//{
//    int arr[] = {1,2,3,4,5,6,7,8,9,10};
//    //[] - 下标引用操作符
//    // 数组是使用下标来访问的，下标是从0开始的
//    int i = 0;
//    int sz = sizeof(arr) / sizeof(arr[0]); // 数组的大小可以计算获得
//    //1.通过下标来打印每一个元素(正向打印)
//    /*
//    for (i = 0; i < sz; i++)
//        printf("%d ", arr[i]);
//    */
//    //2.通过下标来打印每一个元素(反向打印)
//    /*
//    for (i = sz - 1; i >= 0; i--)
//        printf("%d ", arr[i]);
//    */
//
//
//    return 0;
//}

///一维数组在内存中的储存
int main()
{
    int arr[] = {1,2,3,4,5,6,7,8,9,10};
    int i = 0;
    int sz = sizeof(arr) / sizeof(arr[0]);
    // 打印数组每个元素的地址
    for (i = 0; i < sz; i++)
    {
        printf("&arr[%d] = %p\n", i, &arr[i]); // %p 表示地址  需要&arr[i]
        //随着数组下标的增长，元素的地址在有规律的递增   数组在内存中是连续存放的。
    }
    return 0;
}
